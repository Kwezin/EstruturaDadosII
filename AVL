public class AVL extends BST {

    private int comparisonCountAVL;
    public AVL() {
        super();
        comparisonCountAVL = 0;
    }

    public AVL(Node root) {
        super(root);
        comparisonCountAVL = 0;
    }

    public int getComparisonCountAVL() {
        return comparisonCountAVL;
    }

    public void resetComparisonCountAVL() {
        comparisonCountAVL = 0;
    }

    private void updateParentChild(Node parent, Node child, Node newChild) {
        if (parent != null) {
            if (parent.getLeft() == child) {
                parent.setLeft(newChild);
            } else {
                parent.setRight(newChild);
            }
        } else {
            root = newChild;
            if (newChild != null) {
                newChild.setParent(null);
            }
        }
    }

    private Node rebalance(Node node) {
        node.updateBalanceFactor();

        if (node.getBalanceFactor() > 1) {
            if (node.getRight() != null && node.getRight().getBalanceFactor() < 0) {
                node.setRight(rotateRight(node.getRight()));
            }
            return rotateLeft(node);
        } else if (node.getBalanceFactor() < -1) {
            if (node.getLeft() != null && node.getLeft().getBalanceFactor() > 0) {
                node.setLeft(rotateLeft(node.getLeft()));
            }
            return rotateRight(node);
        }

        return node;
    }


    private Node rotateLeft(Node node) {
        if (node == null) return null;

        Node newRoot = node.getRight();
        updateParentChild(node.getParent(), node, newRoot);

        node.setRight(newRoot.getLeft());
        newRoot.setLeft(node);

        node.updateBalanceFactor();
        newRoot.updateBalanceFactor();

        return newRoot;
    }

    private Node rotateRight(Node node) {
        if (node == null) return null;

        Node newRoot = node.getLeft();
        updateParentChild(node.getParent(), node, newRoot);

        node.setLeft(newRoot.getRight());
        newRoot.setRight(node);

        node.updateBalanceFactor();
        newRoot.updateBalanceFactor();

        return newRoot;
    }

    public void insertAVL(Node newNode) {
        resetComparisonCountAVL();
        root = insertAVL(root, null, newNode);
    }

    private Node insertAVL(Node node, Node parent, Node newNode) {
        if (node == null) {
            newNode.setParent(parent);
            return newNode;
        }

        comparisonCountAVL++;

        int diff = newNode.getId() - node.getId();

        if (diff < 0) {
            node.setLeft(insertAVL(node.getLeft(), node, newNode));
        } else if (diff > 0) {
            node.setRight(insertAVL(node.getRight(), node, newNode));
        } else {
            throw new RuntimeException("Duplicatas não permitidas!");
        }

        node.updateBalanceFactor();
        return rebalance(node);


    }
  @Override
  public void remove(int id) {
      resetComparisonCountBST();
      root = remove(root, id);
      if (root != null) {
          System.out.println("Removido com sucesso!");
      }else{
          System.out.println("Não foi possível remover!");
      }
  }

  private Node remove(Node node, int id) {
      if (node == null) return null;

      setComaparisonCountBST(getComparisonCountBST()+1);
      int diff = id - node.getId();

      if (diff < 0) {
          // Buscar na subárvore esquerda
          node.setLeft(remove(node.getLeft(), id));
      } else if (diff > 0) {
          // Buscar na subárvore direita
          node.setRight(remove(node.getRight(), id));
      } else {
          // Nó encontrado
          if (node.getLeft() == null && node.getRight() == null) {
              // Caso 1: Nó sem filhos
              return null;
          } else if (node.getLeft() == null) {
              // Caso 2: Um único filho (direito)
              return node.getRight();
          } else if (node.getRight() == null) {
              // Caso 2: Um único filho (esquerdo)
              return node.getLeft();
          } else {
              // Caso 3: Dois filhos
              Node successor = findMin(node.getRight());
              node.setId(successor.getId());
              node.setRight(remove(node.getRight(), successor.getId()));
          }
      }

      // Atualizar o fator de balanceamento e rebalancear se necessário
      node.updateBalanceFactor();
      return rebalance(node);
  }

  private Node findMin(Node node) {
      while (node.getLeft() != null) {
          setComaparisonCountBST(getComparisonCountBST()+1);
          node = node.getLeft();
      }
      return node;
  }

}
