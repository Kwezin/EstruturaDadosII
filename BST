public class BST extends BinaryTree {

  private int comparisonCountBST;
  public BST() {
      super();
      comparisonCountBST = 0;
  }

  public BST(Node root) {
      super(root);
      comparisonCountBST = 0;
  }

  public int getComparisonCountBST() {
      return comparisonCountBST;
  }

  public void resetComparisonCountBST() {
      comparisonCountBST = 0;
  }

  public int setComaparisonCountBST(int count) {
      return comparisonCountBST = count;
  }

  public Node search(int id) {
      resetComparisonCountBST();
      return search(root, id);
    

  }

  private Node search(Node node, int id) {
      if (node == null) return null;

      comparisonCountBST++;

      int diff = id - node.getId();
      if (diff < 0) return search(node.getLeft(), id);
      if (diff > 0) return search(node.getRight(), id);

      return node;
  }

  public void insert(Node newNode) {
      resetComparisonCountBST();
      root = insert(root, null, newNode);
  }

  private Node insert(Node node, Node parent, Node newNode) {


      if (node == null) {
          newNode.setParent(parent);
          return newNode;
      }

      comparisonCountBST++;

      int diff = newNode.getId() - node.getId();

      if (diff < 0) {
          node.setLeft(insert(node.getLeft(), node, newNode));
      } else if (diff > 0) {
          node.setRight(insert(node.getRight(), node, newNode));
      } else {
          throw new RuntimeException("Duplicatas não permitidas!");
      }

      return node;
  }
  public void remove(int id) {
    resetComparisonCountBST();
    root = remove(root, id);
  }

  private Node remove(Node node, int id) {
    if (node == null) return null;

    comparisonCountBST++;
    int diff = id - node.getId();

    if (diff < 0) {
        // Buscar na subárvore esquerda
        node.setLeft(remove(node.getLeft(), id));
    } else if (diff > 0) {
        // Buscar na subárvore direita
        node.setRight(remove(node.getRight(), id));
    } else {
        // Nó encontrado
        if (node.getLeft() == null && node.getRight() == null) {
            // Caso 1: Nó sem filhos
            return null;
        } else if (node.getLeft() == null) {
            // Caso 2: Um único filho (direito)
            return node.getRight();
        } else if (node.getRight() == null) {
            // Caso 2: Um único filho (esquerdo)
            return node.getLeft();
        } else {
            // Caso 3: Dois filhos
            Node successor = findMin(node.getRight());
            node.setId(successor.getId());
            node.setRight(remove(node.getRight(), successor.getId()));
        }
    }
    return node;
  }

  private Node findMin(Node node) {
    while (node.getLeft() != null) {
        comparisonCountBST++;
        node = node.getLeft();
    }
    return node;
  }


  public void acidentesSexo() {
    int[] contagem = new int[2]; // [0] para masculino, [1] para feminino, [2]
    acidentesSexo(root, contagem);
    System.out.println("\nQuantidade de homens: " + contagem[0]);
    System.out.println("\nQuantidade de mulheres: " + contagem[1]);
  }

  private void acidentesSexo(Node node, int[] contagem) {
    if (node == null) return;

    // Visita os nós da esquerda
    acidentesSexo(node.getLeft(), contagem);

    // Atualiza a contagem com base no sexo
    if (node.getSexo().equalsIgnoreCase("masculino")) {
        contagem[0]++;
    } else if (node.getSexo().equalsIgnoreCase("feminino")) {
        contagem[1]++;
    }


    // Visita os nós da direita
    acidentesSexo(node.getRight(), contagem);
  }

  public void distribuicaoPorDiaDaSemana() {
    int[] dias = new int[7]; // Índices: 0=Domingo, 1=Segunda, ..., 6=Sábado
    distribuicaoPorDiaDaSemana(root, dias);

    String[] nomesDias = {"Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"};
    System.out.println("Distribuição de acidentes por dia da semana:");
    for (int i = 0; i < dias.length; i++) {
        System.out.println(nomesDias[i] + ": " + dias[i]);
    }
  }

  private void distribuicaoPorDiaDaSemana(Node node, int[] dias) {
    if (node == null) return;

    distribuicaoPorDiaDaSemana(node.getLeft(), dias);

    switch (node.getDia_semana().toLowerCase()) {
        case "domingo": dias[0]++; break;
        case "segunda-feira": dias[1]++; break;
        case "terça-feira": dias[2]++; break;
        case "quarta-feira": dias[3]++; break;
        case "quinta-feira": dias[4]++; break;
        case "sexta-feira": dias[5]++; break;
        case "sábado": dias[6]++; break;
    }

    distribuicaoPorDiaDaSemana(node.getRight(), dias);
  }

  public void influenciaTipoVeiculo() {
    int[][] matriz = new int[14][3]; // Linhas: tipos de veículo, Colunas: gravidades
    influenciaTipoVeiculo(root, matriz);

    String[] tiposVeiculos = {"Automóvel", "Bicicleta", "Caminhão", "Caminhão-trator", "Caminhonete", "Camioneta", "Ciclomotor", "Motocicleta", "Motoneta", "Motor-casa", "Ônibus", "Reboque", "Semireboque", "Utilitário"};
    String[] gravidades = {"Sem vítimas", "Feridos", "Fatais"};

    System.out.println("Influência do tipo de veículo na gravidade dos acidentes:");
    for (int i = 0; i < matriz.length; i++) {
        System.out.println("Tipo de veículo: " + tiposVeiculos[i]);
        for (int j = 0; j < matriz[i].length; j++) {
            System.out.println("  " + gravidades[j] + ": " + matriz[i][j]);
        }
    }
  }

  private void influenciaTipoVeiculo(Node node, int[][] matriz) {
    if (node == null) return;

    influenciaTipoVeiculo(node.getLeft(), matriz);

    int tipoIndex = -1;
    int gravidadeIndex = -1;

    switch (node.getTipo_veiculo().toLowerCase()) {
        case "automóvel": tipoIndex = 0; break;
        case "bicicleta": tipoIndex = 1; break;
        case "caminhão": tipoIndex = 2; break;
        case "caminhão-trator": tipoIndex = 3; break;
        case "caminhonete": tipoIndex = 4; break;
        case "camioneta": tipoIndex = 5; break;
        case "ciclomotor": tipoIndex = 6; break;
        case "motocicleta": tipoIndex = 7; break;
        case "motoneta": tipoIndex = 8; break;
        case "motor-casa": tipoIndex = 9; break;
        case "ônibus": tipoIndex = 10; break;
        case "reboque": tipoIndex = 11; break;
        case "semireboque": tipoIndex = 12; break;
        case "utilitário": tipoIndex = 13; break;
    }

    switch (node.getClassificacao_acidente().toLowerCase()) {
        case "sem vítimas": gravidadeIndex = 0; break;
        case "com vítimas feridas": gravidadeIndex = 1; break;
        case "com vítimas fatais": gravidadeIndex = 2; break;
    }

    if (tipoIndex != -1 && gravidadeIndex != -1) {
        matriz[tipoIndex][gravidadeIndex]++;
    }

    influenciaTipoVeiculo(node.getRight(), matriz);
  }

  
  public void trechosComMaisAcidentes() {
    String[] trechos = new String[100]; // Lista de trechos
    int[] contagem = new int[100]; // Quantidade de acidentes em cada trecho

    trechosComMaisAcidentes(root, trechos, contagem);

    int maxIndex = 0;
    for (int i = 1; i < contagem.length; i++) {
        if (contagem[i] > contagem[maxIndex]) {
            maxIndex = i;
        }
    }

    System.out.println("Trecho com mais acidentes: " + trechos[maxIndex]);
    System.out.println("Quantidade de acidentes: " + contagem[maxIndex]);
  }

  private void trechosComMaisAcidentes(Node node, String[] trechos, int[] contagem) {
    if (node == null) return;

    trechosComMaisAcidentes(node.getLeft(), trechos, contagem);

    String trecho = node.getBr() + " - KM " + node.getKm();
    int index = -1;
    for (int i = 0; i < trechos.length; i++) {
        if (trechos[i] == null) {
            trechos[i] = trecho;
            index = i;
            break;
        } else if (trechos[i].equals(trecho)) {
            index = i;
            break;
        }
    }

    if (index != -1) {
        contagem[index]++;
    }

    trechosComMaisAcidentes(node.getRight(), trechos, contagem);
  }

  public void influenciaCondicaoMeteorologica() {
    // Arrays para armazenar dados: índices 0 para "Sem Vítimas", 1 para "Feridos", 2 para "Fatais"
    int[] acidentesChuva = new int[3];
    int[] acidentesCeuClaro = new int[3];
    int[] acidentesGaroa = new int[3];
    int[] acidentesNublado = new int[3];
    int[] acidentesSol = new int[3];

    calcularInfluenciaCondicaoMeteorologica(root, acidentesChuva, acidentesCeuClaro, acidentesGaroa, acidentesNublado, acidentesSol);

    // Exibir resultados
    System.out.println("Acidentes em condição de CHUVA:");
    System.out.println("Sem vítimas: " + acidentesChuva[0]);
    System.out.println("Com feridos: " + acidentesChuva[1]);
    System.out.println("Fatais: " + acidentesChuva[2]);

    System.out.println("\nAcidentes em condição de CÉU CLARO:");
    System.out.println("Sem vítimas: " + acidentesCeuClaro[0]);
    System.out.println("Com feridos: " + acidentesCeuClaro[1]);
    System.out.println("Fatais: " + acidentesCeuClaro[2]);

    System.out.println("\nAcidentes em condição de GAROA/CHUVISCO:");
    System.out.println("Sem vítimas: " + acidentesGaroa[0]);
    System.out.println("Com feridos: " + acidentesGaroa[1]);
    System.out.println("Fatais: " + acidentesGaroa[2]);

    System.out.println("\nAcidentes em condição de NUBLADO:");
    System.out.println("Sem vítimas: " + acidentesNublado[0]);
    System.out.println("Com feridos: " + acidentesNublado[1]);
    System.out.println("Fatais: " + acidentesNublado[2]);

    System.out.println("\nAcidentes em condição de SOL:");
    System.out.println("Sem vítimas: " + acidentesSol[0]);
    System.out.println("Com feridos: " + acidentesSol[1]);
    System.out.println("Fatais: " + acidentesSol[2]);
  }

  private void calcularInfluenciaCondicaoMeteorologica(Node node, int[] acidentesChuva, int[] acidentesCeuClaro, int[] acidentesGaroa, int[] acidentesNublado, int[]acidentesSol) {
    if (node == null) return;

    calcularInfluenciaCondicaoMeteorologica(node.getLeft(), acidentesChuva, acidentesCeuClaro, acidentesGaroa, acidentesNublado, acidentesSol);

    // Verificar condição meteorológica
    if (node.getCondicao_metereologica().equalsIgnoreCase("chuva")) {
        categorizarGravidade(node, acidentesChuva);
    } else if (node.getCondicao_metereologica().equalsIgnoreCase("céu claro")) {
        categorizarGravidade(node, acidentesCeuClaro);
    } else if (node.getCondicao_metereologica().equalsIgnoreCase("Garoa/Chuvisco")) {
        categorizarGravidade(node, acidentesGaroa);
    }else if (node.getCondicao_metereologica().equalsIgnoreCase("Nublado")){
      categorizarGravidade(node, acidentesNublado);
    } else if(node.getCondicao_metereologica().equalsIgnoreCase("Sol")){
      categorizarGravidade(node, acidentesSol);
    }

    calcularInfluenciaCondicaoMeteorologica(node.getRight(), acidentesChuva, acidentesCeuClaro, acidentesGaroa, acidentesNublado, acidentesSol);
  }

  private void categorizarGravidade(Node node, int[] contador) {
    // Verifica a gravidade do acidente
    if (node.getClassificacao_acidente().equalsIgnoreCase("sem vítimas")) {
        contador[0]++;
    } else if (node.getClassificacao_acidente().equalsIgnoreCase("com vítimas feridas")) {
        contador[1]++;
    } else if (node.getClassificacao_acidente().equalsIgnoreCase("com vítimas fatais")) {
        contador[2]++;
    }
  }

  public void tiposDeAcidentesMaisOcorridos() {
    // Array para contar a frequência de cada tipo de acidente
    String[] tiposAcidente = {
        "Atropelamento de Pedestre",
        "Capotamento",
        "Colisão com objeto",
        "Colisão lateral mesmo sentido",
        "Colisão frontal",
        "Colisão lateral sentido oposto",
        "Colisão transversal",
        "Colisão traseira",
        "Queda de ocupante de veículo",
        "Saída de leito carroçável",
        "Tombamento"
    };
    int[] frequencia = new int[tiposAcidente.length];

    // Percorrer a árvore para contar os acidentes
    contarTiposDeAcidentes(root, tiposAcidente, frequencia);

    // Determinar o tipo de acidente mais frequente
    int maxFrequencia = 0;
    for (int freq : frequencia) {
        if (freq > maxFrequencia) maxFrequencia = freq;
    }

    System.out.println("Frequência de cada tipo de acidente:");
    for (int i = 0; i < tiposAcidente.length; i++) {
        System.out.println(tiposAcidente[i] + ": " + frequencia[i]);
    }

    System.out.println("\nTipos de acidentes mais frequentes:");
    for (int i = 0; i < tiposAcidente.length; i++) {
        if (frequencia[i] == maxFrequencia) {
            System.out.println(tiposAcidente[i] + " - " + maxFrequencia + " ocorrências");
        }
    }
  }

  private void contarTiposDeAcidentes(Node node, String[] tiposAcidente, int[] frequencia) {
    if (node == null) return;

    contarTiposDeAcidentes(node.getLeft(), tiposAcidente, frequencia);

    String tipo = node.getTipo_acidente();
    for (int i = 0; i < tiposAcidente.length; i++) {
        if (tipo.equalsIgnoreCase(tiposAcidente[i])) {
            frequencia[i]++;
            break;
        }
    }

    contarTiposDeAcidentes(node.getRight(), tiposAcidente, frequencia);
  }







}
